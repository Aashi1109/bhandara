# Base stage
FROM node:20-alpine as base

# Install stage
FROM base as deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm install --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Build stage
FROM base as builder
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN \
  if [ -f yarn.lock ]; then yarn run build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm run build; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Runner stage / Production image for video worker
FROM base as runner
WORKDIR /app

# Install FFmpeg for video processing
RUN apk add --no-cache ffmpeg

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 videoworker

COPY --from=builder /app/dist/ ./
COPY --from=builder /app/package.json ./package.json
COPY --from=deps /app/node_modules ./node_modules

# Create directories for logs and temp files
RUN mkdir -p /app/logs /app/tmp && chown -R videoworker:nodejs /app

USER videoworker

# Health check for video worker (check Redis connection)
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
  CMD node -e "const redis = require('ioredis'); const config = require('./config/index.js').default; const client = new redis(config.redis.url); client.ping().then(() => process.exit(0)).catch(() => process.exit(1));"

CMD ["node", "src/workers/video-processor/worker.js"]
